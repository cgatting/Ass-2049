import sys
import sqlite3
import qrcode
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel, QPushButton, QScrollArea, \
    QDialog, QLineEdit, QVBoxLayout as QVBox, QHBoxLayout, QFrame
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtCore import Qt, QTimer, QDate, QTime
from PyQt5 import QtGui
import logging



class PromotionsApp(QMainWindow):
    def logout(self):
        # Log the logout action with a timestamp
        logging.info('Logout at %s', QTime.currentTime().toString(Qt.DefaultLocaleLongDate))

        # Close the application
        self.close()        

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.setWindowTitle("Promotions App")
        self.setGeometry(0, 0, 1020, 600)

        central_widget = QWidget()
        central_widget.setStyleSheet("background-color: rgb(32, 176, 124);")  # Set the background color
        self.setCentralWidget(central_widget)
        central_widget_layout = QVBoxLayout()
        central_widget.setLayout(central_widget_layout)
        # Header with buttons
        header_widget = QWidget()
        header_widget.setStyleSheet("background-color: pink;")
        header_widget.setFixedHeight(80)  # Set the background color to white
        header_layout = QHBoxLayout()
        header_widget.setLayout(header_layout)

        logout_button = QPushButton("Logout")
        date_label = QLabel("Date: ")
        time_label = QLabel("Time: ")
        business_label = QLabel("DISPLAY LOGO HERE")
        business_label.setPixmap(QtGui.QPixmap("C:\\Users\\cgatt\\Desktop\\Semister1\\CT4029 - Principles of Programming\\Assigment\\Ass-2049\\UI Files\\../images/Logo.png"))

        header_layout.addWidget(logout_button)
        header_layout.addWidget(date_label)
        header_layout.addWidget(time_label)
        header_layout.addWidget(business_label)

        scroll_area = QScrollArea(self)
        scroll_area.setWidgetResizable(True)
        central_widget_layout.addWidget(header_widget)
        central_widget_layout.addWidget(scroll_area)

        container_widget = QWidget()
        scroll_area.setWidget(container_widget)
        container_layout = QVBoxLayout()
        container_widget.setLayout(container_layout)

        # Create the "promotions" table if it doesn't exist
        self.create_promotions_table()

        # Insert sample data into the "promotions" table

        self.promotions = self.fetch_promotions_from_database()

        for promotion in self.promotions:
            promotion_widget = self.create_promotion_widget(promotion)
            container_layout.addWidget(promotion_widget)

        add_promotion_button = QPushButton("Add New Promotion")
        add_promotion_button.clicked.connect(self.show_add_promotion_dialog)
        central_widget_layout.addWidget(add_promotion_button)

        # Update date and time labels with current date and time
        self.update_date_time_labels(date_label, time_label)

        # Create a timer to update the time every second
        self.timer = QTimer(self)
        self.timer.timeout.connect(lambda: self.update_date_time_labels(date_label, time_label))
        self.timer.start(1000)
        logging.basicConfig(filename='app_log.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

            # Connect the logout button to the logout function
        logout_button.clicked.connect(self.logout)
        self.show()

    def create_promotions_table(self):
        conn = sqlite3.connect("promotions.db")
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promotions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                qr_code TEXT,
                text TEXT,
                voucher_code TEXT
            )
        ''')

        conn.commit()
        conn.close()


    def fetch_promotions_from_database(self):
        conn = sqlite3.connect("promotions.db")
        cursor = conn.cursor()
        cursor.execute("SELECT qr_code, text, voucher_code FROM promotions")
        promotions = cursor.fetchall()
        conn.close()
        return promotions

    def create_promotion_widget(self, promotion):
        promotion_widget = QFrame()
        promotion_widget.setFrameShape(QFrame.StyledPanel)
        promotion_widget.setStyleSheet("background-color: rgb(177, 44, 116);")
        promotion_layout = QVBoxLayout()
        promotion_widget.setLayout(promotion_layout)

        # Create a QR code image from the voucher code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=5,
            border=4,
        )
        qr.add_data(promotion[2])  # Use the voucher code
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="white", back_color="black")
        qr_image.save("temp_qr.png")  # Save the QR code as 'temp_qr.png'
        qr_pixmap = QPixmap("temp_qr.png")

        qr_code_label = QLabel()
        qr_code_label.setPixmap(qr_pixmap)  # Set the QR code image as the label's pixmap
        qr_code_label.setAlignment(Qt.AlignRight)

        text_label = QLabel(f"Text: {promotion[1]}")
        text_label.setFont(QFont("Arial", 14, QFont.Bold))
        voucher_label = QLabel(f"Voucher Code: {promotion[2]}")
        details_button = QPushButton("Send to Email")
        details_button.setStyleSheet("background-color: rbg(32, 176, 124)")
        save_button = QPushButton("Save Locally")
        save_button.setStyleSheet("background-color: rbg(32, 176, 124)")


        promotion_layout.addWidget(text_label)
        promotion_layout.addWidget(voucher_label)
        promotion_layout.addWidget(qr_code_label)
        promotion_layout.addWidget(details_button)
        promotion_layout.addWidget(save_button)

        return promotion_widget

    def show_add_promotion_dialog(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("Add New Promotion")
        dialog.setGeometry(200, 200, 400, 200)

        layout = QVBox()

        qr_code_label = QLabel("QR Code:")
        qr_code_input = QLineEdit()

        text_label = QLabel("Text:")
        text_input = QLineEdit()

        voucher_label = QLabel("Voucher Code:")
        voucher_input = QLineEdit()

        add_button = QPushButton("Add Promotion")
        add_button.clicked.connect(lambda: self.add_promotion_to_database(qr_code_input.text(), text_input.text(), voucher_input.text(), dialog))

        layout.addWidget(qr_code_label)
        layout.addWidget(qr_code_input)
        layout.addWidget(text_label)
        layout.addWidget(text_input)
        layout.addWidget(voucher_label)
        layout.addWidget(voucher_input)
        layout.addWidget(add_button)

        dialog.setLayout(layout)
        dialog.exec_()

    def add_promotion_to_database(self, qr_code, text, voucher_code, dialog):
        conn = sqlite3.connect("promotions.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO promotions (qr_code, text, voucher_code) VALUES (?, ?, ?)", (qr_code, text, voucher_code))
        conn.commit()
        conn.close()

        # Refresh the promotions list and update the UI
        self.promotions = self.fetch_promotions_from_database()
        self.update_ui_with_new_promotion()
        dialog.accept()

    def update_ui_with_new_promotion(self):
        # Clear the existing widgets in the main page
        for i in reversed(range(self.centralWidget().layout().count())):
            self.centralWidget().layout().itemAt(i).widget().setParent(None)

        # Repopulate the main page with updated promotions
        container_widget = self.centralWidget().findChild(QWidget)
        container_layout = container_widget.layout()
        for promotion in self.promotions:
            promotion_widget = self.create_promotion_widget(promotion)
            container_layout.addWidget(promotion_widget)

    def update_date_time_labels(self, date_label, time_label):
        current_date = QDate.currentDate().toString(Qt.DefaultLocaleLongDate)
        current_time = QTime.currentTime().toString(Qt.DefaultLocaleLongDate)

        date_label.setText(f"Date: {current_date}")
        time_label.setText(f"Time: {current_time}")

def main():
    app = QApplication(sys.argv)
    ex = PromotionsApp()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
